<div class="card-container">
    <div id="pointer" @attributes="Style"></div>
    <div class="card-top">

        <div class="sticker">
        </div>
        <div class="card-type">
            <img src="assets/visa.png" alt="visa card type logo" style="margin-bottom: 40px; @(GetCardType(CardDetails.CardNumber))">
            <img src="assets/mastercard.png" alt="master card type logo" style="@(GetCardType(CardDetails.CardNumber))">
            <img src="assets/discover.png" alt="discover card type logo" style="@(GetCardType(CardDetails.CardNumber))">
        </div>

    </div>

    @* <div class="card-input @CardNumberFocus">
    
       @for (int i = 0; i < 16; i++)
        { 
            <span class="font-monospace" style="font-size: 30px;">@GetDisplayCharacter(i)</span>
         } 
        </div> *@

    <ul id="snum" class="card-input">
        @for (int i = 0; i < 4; i++)
        {
            <li>
                @for (int j = 0; j < 4; j++)
                {
                    bool isCardNumberNotEmpty = CardNumbers[i * 4 + j] != "#";
                    <span class="stars1 @(isCardNumberNotEmpty ? "active" : "")">
                        <label class="star">#</label><label class="label">@CardNumbers[i * 4 + j]</label>
                    </span>
                }
            </li>
        }
    </ul>


    <div class="card-bottom">
        <div class="card-name">
            <h6 class="font-monospace">
                Card Holder
            </h6>
            <h5 class="font-monospace">
                @(CardDetails.CardName ?? " AD SOYAD")
            </h5>
        </div>
        <div class="card-expire">
            <h6 class="font-monospace">
                Expires
            </h6>
            <div class="expires">
                <div class="d-flex justify-content-evenly">
                    <div class="@MonthExpiry text-white">
                        <h5 class="font-monospace">MM</h5>
                    </div>
                    <div class="text-white">/</div>
                    <div class="@YearExpiry text-white">
                        <h5 class="font-monospace">YY</h5>
                    </div>
                </div>

                <div class="d-flex justify-content-evenly">
                    <div class="@MonthValueExpiry text-white">
                        <h5>@(CardDetails.Month ?? "MM")</h5>
                    </div>
                    <div>/</div>
                    <div class="@YearValueExpiry text-white">
                        <h5>@(GetYear(CardDetails.Year))</h5>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<div class="card-container-back">

    <div class="black-strip mt-2"></div>

    <div class="cvv-container">
        <h5>CVV</h5>
        <div class="cvv-input">
            <h5 class="cvv-text mb">@(CardDetails.Cvv ?? "")</h5>
        </div>
    </div>

    <div class="bottom-logo">
        <div class="card-expire card-type">
            <img src="assets/visa.png" alt="visa card type logo" style="margin-bottom: 40px; @(GetCardType(CardDetails.CardNumber))">
            <img src="assets/mastercard.png" alt="master card type logo" style="@(GetCardType(CardDetails.CardNumber))">
            <img src="assets/discover.png" alt="discover card type logo" style="@(GetCardType(CardDetails.CardNumber))">
        </div>
    </div>

</div>


@code {

    [Parameter]
    public CardDetails? CardDetails { get; set; }

    [Parameter]
    public string[] CardNumbers { get; set; } = new string[16];

    [Parameter]
    public string CardNumberFocus { get; set; }

    [Parameter]
    public string CardNameFocus { get; set; }

    [Parameter]
    public string CardDateFocus { get; set; }

    public string[] CardNumber { get; set; }

    [Parameter]
    public string MonthExpiry { get; set; }

    [Parameter]
    public string YearExpiry { get; set; }

    [Parameter]
    public string MonthValueExpiry { get; set; } = string.Empty;

    [Parameter]
    public string YearValueExpiry { get; set; } = string.Empty;

    [Parameter]
    public bool IsInputActive { get; set; }

    [Parameter]
    public Dictionary<string, object> Style{ get; set; }

    private string GetDisplayCharacter(int index)
    {
        if (CardDetails != null && CardDetails.CardNumber != null && index < CardDetails.CardNumber.Length)
        {
            if ((index + 1) % 4 == 0 && index != CardDetails.CardNumber.Length - 1)
            {
                return FormatCardNumber(CardDetails.CardNumber[index].ToString()) + " ";
            }
            else
            {
                return FormatCardNumber(CardDetails.CardNumber[index].ToString());
            }
        }
        else
        {
            return "#";
        }
    }


    // Method to format the card number
    private string FormatCardNumber(string input)
    {
    // Remove any existing spaces
        string formatted = input.Replace(" ", "");

    // Insert spaces after every four characters
        if (formatted.Length > 4)
        {
            formatted = string.Join(" ", Enumerable.Range(0, (int)Math.Ceiling(formatted.Length / 4.0))
                .Select(i => formatted.Substring(i * 4, Math.Min(4, formatted.Length - i * 4))));
        }

        return formatted;
    }

    string GetYear(string year)
    {
        if (string.IsNullOrEmpty(year))
        {
            return "YY";
        }

        return year.Substring(2);
    }

    public static string GetCardType(string cardNumber)
    {
        if (cardNumber is null)
        {
            return "visa";
        }
    // Remove any spaces and non-digit characters
        string cleanCardNumber = new string(cardNumber.Where(char.IsDigit).ToArray());

    // Take the first four digits
        string firstFourDigits = cleanCardNumber.Length >= 4 ? cleanCardNumber.Substring(0, 4) : cleanCardNumber;

        return firstFourDigits switch
        {
            var digits when digits.StartsWith("4") => "transform: translateY(0);",
            var digits when digits.StartsWith("5") && digits.Length == 4 => "transform: translateY(-130%);",
            var digits when digits == "6011" || digits == "65" => "transform: translateY(-910%);",
            _ => "transform: translateY(0);"
            };
    }

    // store card number into a variable
    // manipulate that variable

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

    // Ensure CardDetails is not null and CardNumber is not null or empty
        if (CardDetails != null && !string.IsNullOrEmpty(CardDetails.CardNumber))
        {
    // Update CardNumbers with individual characters
            for (int i = 0; i < CardNumbers.Length; i++)
            {
                if (i < CardDetails.CardNumber.Length)
                {
                    CardNumbers[i] = CardDetails.CardNumber[i].ToString();
                }
                else
                {
    // If CardDetails.CardNumber is shorter than 16 characters, fill the remaining elements with "#"
                    CardNumbers[i] = "#";
                }
            }
        }
        else
        {
    // If CardDetails or CardNumber is null or empty, set all elements to "#"
            for (int i = 0; i < CardNumbers.Length; i++)
            {
                CardNumbers[i] = "#";
            }
        }
    }

}