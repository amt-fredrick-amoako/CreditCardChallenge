
<div class="card-container">

    <div class="card-top">

        <div class="sticker">
        </div>
        <div class="card-type">
            <img src="assets/visa.png" alt="visa card type logo" style="margin-bottom: 40px; @(GetCardType(CardDetails.CardNumber))">
            <img src="assets/mastercard.png" alt="master card type logo" style="@(GetCardType(CardDetails.CardNumber))">
            <img src="assets/discover.png" alt="discover card type logo" style="@(GetCardType(CardDetails.CardNumber))">
        </div>

    </div>

    <div class="card-input">

        @for (int i = 0; i < 16; i++)
        {
            <span>@GetDisplayCharacter(i)</span>
        }

    </div>

    <div class="card-bottom">
        <div class="card-name">
            <h6>
                Card Holder
            </h6>
            <h5>
                @(CardDetails.CardName ?? " AD SOYAD")
            </h5>
        </div>
        <div class="card-expire">
            <h6>
                Expires
            </h6>
            <h5>
                @(CardDetails.Month ?? "MM")/@(GetYear(CardDetails.Year))
            </h5>
        </div>
    </div>

</div>

<div class="card-container-back">

    <div class="black-strip mt-2"></div>

    <div class="cvv-container">
        <h5>CVV</h5>
        <div class="cvv-input">
            <h5 class="cvv-text mb">@(CardDetails.Cvv ?? "")</h5>
        </div>
    </div>

    <div class="bottom-logo">
        <div class="card-expire card-type">
            <img src="assets/visa.png" alt="visa card type logo" style="margin-bottom: 40px; @(GetCardType(CardDetails.CardNumber))">
            <img src="assets/mastercard.png" alt="master card type logo" style="@(GetCardType(CardDetails.CardNumber))">
            <img src="assets/discover.png" alt="discover card type logo" style="@(GetCardType(CardDetails.CardNumber))">
        </div>
    </div>

</div>


@code {
    [Parameter]
    public CardDetails? CardDetails { get; set; }

    private string GetDisplayCharacter(int index)
    {
        if (CardDetails != null && CardDetails.CardNumber != null && index < CardDetails.CardNumber.Length)
        {
            return CardDetails.CardNumber[index].ToString();
        }
        else
        {
            return "#";
        }
    }

    // Method to format the card number
    private string FormatCardNumber(string input)
    {
        // Remove any existing spaces
        string formatted = input.Replace(" ", "");

        // Insert spaces after every four characters
        if (formatted.Length > 4)
        {
            formatted = string.Join(" ", Enumerable.Range(0, (int)Math.Ceiling(formatted.Length / 4.0))
                .Select(i => formatted.Substring(i * 4, Math.Min(4, formatted.Length - i * 4))));
        }

        return formatted;
    }

    string GetYear(string year)
    {
        if (string.IsNullOrEmpty(year))
        {
            return "YY";
        }

        return year.Substring(2);
    }

    public static string GetCardType(string cardNumber)
    {
        if (cardNumber is null)
        {
            return "visa";
        }
        // Remove any spaces and non-digit characters
        string cleanCardNumber = new string(cardNumber.Where(char.IsDigit).ToArray());

        // Take the first four digits
        string firstFourDigits = cleanCardNumber.Length >= 4 ? cleanCardNumber.Substring(0, 4) : cleanCardNumber;

        return firstFourDigits switch
        {
            var digits when digits.StartsWith("4") => "transform: translateY(0);",
            var digits when digits.StartsWith("5") && digits.Length == 4 => "transform: translateY(-130%);",
            var digits when digits == "6011" || digits == "65" => "transform: translateY(-910%);",
            _ => "transform: translateY(0);"
        };
    }
}