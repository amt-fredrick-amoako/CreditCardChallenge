@page "/"
@inject IJSRuntime JavaScript
@inject HttpClient HttpClient
@inject CardDetailsValidator CardDetailsValidator


<form method="post" class="form-container" @onsubmit="SubmitForm">

    <div class="cards @(isRotated ? "rotate" : "")">
        <CardComponent CardDetails="@CardDetails" MonthExpiry="@MonthExpiry" YearExpiry="@YearExpiry" YearValueExpiry="@YearValueExpiry" MonthValueExpiry="@MonthValueExpiry"/>
    </div>

    <div class="form-input">
        <div class="input-container w-100">
            <label for="cardNumber" class="form-label">Card Number</label>
            <input @attributes="@CardNumberAttributes"
            @oninput="args => HandleNumberInput(args)"
                   name="cardNumber" value="@CardDetails.CardNumber">
            <span class="validation-message">
                @(validationErrors?.Errors.FirstOrDefault(e => e.PropertyName == nameof(CardDetails.CardNumber))?.ErrorMessage)
            </span>
        </div>
        <div class="input-container w-100">
            <label for="cardName" class="form-label">Card Name</label>
            <input @attributes="@CardNameAttributes"
            @oninput="args => HandleNameInput(args)" name="cardName" value="@CardDetails.CardName">
            <span class="validation-message">
                @(validationErrors?.Errors.FirstOrDefault(e => e.PropertyName == nameof(CardDetails.CardName))?.ErrorMessage)
            </span>
        </div>
        <div class="security w-100 justify-content-between">
            <div class="select-container w-75">
                <label for="expiry" class="form-label">Expiration Date</label>
                <select @onchange="args => HandleMonthChange(args)" id="expiry" name="month" class="mr-20 form-select d-inline">
                    <option disabled selected value="">Month</option>
                    @foreach (var month in Months)
                    {
                        <option value="@month">@month</option>
                    }
                </select>

                <select @onchange="args => HandleYearChange(args)" name="year" class="form-select d-inline">
                    <option disabled selected value="">Year</option>
                    @foreach (var year in Years)
                    {
                        <option value="@year">@year</option>
                    }
                </select>

            </div>
            <div class="input-container">
                <label for="cvv" class="form-label">CVV</label>
                <input id="cvv" maxlength="4" type="number" class="cvv form-control" @bind="@CardDetails.Cvv" @bind:event="oninput" @onfocusin="Rotate" @onfocusout="RotateBack" name="cvv" />
                <span class="validation-message">
                    @(validationErrors?.Errors.FirstOrDefault(e => e.PropertyName == nameof(CardDetails.Cvv))?.ErrorMessage)
                </span>
            </div>
        </div>
        <div class="input-container">
            <button class="btn btn-primary button">Submit</button>
        </div>
    </div>
</form>

@code {
    CardDetails? CardDetails { get; set; }

    Dictionary<string, object> CardNumberAttributes { get; set; } = new()
    {
        {"id", "cardNumber"},
        {"maxlength", "16"},
        {"type", "number"},
        {"format", "^[0-9]{16}$"},
        {"class", "form-control"}
    };

    Dictionary<string, object> CardNameAttributes { get; set; } = new()
    {
        {"id", "cardName"},
        {"type", "text"},
        {"class", "form-control"}
    };

    string[] Years { get; set; }

    string[] Months { get; set; }

    bool isRotated = false;

    ValidationResult validationErrors;

    string MonthExpiry { get; set; } = string.Empty;
    string YearExpiry { get; set; } = string.Empty;
    string MonthValueExpiry { get; set; } = string.Empty;
    string YearValueExpiry { get; set; } = string.Empty;

    void Rotate()
    {
        isRotated = true;
    }

    void RotateBack()
    {
        isRotated = false;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CardDetails = new();

        Months = Enumerable.Range(1, 12)
        .Select(month => month.ToString("D2"))
        .ToArray();

        Years = Enumerable.Range(2019, 12)
        .Select(year => year.ToString())
        .ToArray();

    }

    // display message modal
    async void ShowMessage(CardResponse response)
    {

        var messageParams = new
        {
            title = response.Message,
            text = $"Name on Card: {response.CardName}, Card Number: {response.CardNumber}, Card Expiry {response.Month}/{response.Year}, CVV: {response.Cvv}",
            icon = "success",
            buttons = new
            {
                confirm = new { text = "Okay", value = true }
            },
            dangerMode = false
        };

        await JavaScript.InvokeAsync<bool>("swal", messageParams);
    }

    // makes a post request when form is submitted
    async void SubmitForm()
    {
        // perform model validations using fluent validator
        validationErrors = CardDetailsValidator.Validate(CardDetails);

        if (validationErrors.IsValid)
        {
            var response = await HttpClient.PostAsJsonAsync($"https://localhost:7063/validate", CardDetails);
            var message = await response.Content.ReadAsStringAsync();
            var cardResponse = JsonConvert.DeserializeObject<CardResponse>(message);
            ShowMessage(cardResponse);
        }
        else
        {
            foreach (var error in validationErrors.Errors)
            {
                Console.WriteLine(error.ErrorMessage);
            }
        }
    }

    private void ChangeExpiryClass()
    {
        MonthExpiry = "text-expires";
    }

    void HandleNameInput(ChangeEventArgs args) => CardDetails.CardName = args.Value as string;

    void HandleNumberInput(ChangeEventArgs args) => CardDetails.CardNumber = args.Value as string;

    void HandleMonthChange(ChangeEventArgs args)
    {
        CardDetails.Month = args.Value as string;
        MonthExpiry = "swipe-up";
        MonthValueExpiry = "swipe-value-up";
    }

    void HandleYearChange(ChangeEventArgs args)
    {
        CardDetails.Year = args.Value as string;
        YearExpiry = "swipe-up";
        YearValueExpiry = "swipe-value-up";
    }
}
