@page "/"
@using System.Text
@inject IJSRuntime JavaScript
@inject HttpClient HttpClient
@inject CardDetailsValidator CardDetailsValidator


<form method="post" class="form-container" @onsubmit="SubmitForm">

    <div class="cards @(isRotated ? "rotate" : "")">
        <CardComponent CardDetails="@CardDetails" MonthExpiry="@MonthExpiry" MonthValueExpiry="@MonthValueExpiry" Style="@Style" YearExpiry="@YearExpiry" YearValueExpiry="@YearValueExpiry"/>
    </div>

    <div class="form-input">
        <div class="input-container w-100">
            <label for="cardNumber" class="form-label font-monospace">Card Number</label>
            <input @attributes="@CardNumberAttributes"
                   @onfocusin="@(() => { Style = new() { { "style", "opacity: 1; top: 122px; left: 25px; width: 397px; height: 54px;" } }; })"
                   @oninput="HandleNumberInput"
                   @onkeyup="HandleKeyUp"
                   name="cardNumber" value="@CardDetails.CardNumber">
            <span class="validation-message">
                @(validationErrors?.Errors.FirstOrDefault(e => e.PropertyName == nameof(CardDetails.CardNumber))?.ErrorMessage)
            </span>
        </div>
        <div class="input-container w-100">
            <label for="cardName" class="form-label font-monospace">Card Name</label>
            <input @attributes="@CardNameAttributes"
                   @onfocusin="@(() => { Style = new() { { "style", "opacity: 1; top: 210px; left: 14px; width: 362px; height: 76px;" } }; })"
                   @oninput="HandleNameInput" name="cardName" value="@CardDetails.CardName" pattern="[A-Z\sa-z]+">
            <span class="validation-message">
                @(validationErrors?.Errors.FirstOrDefault(e => e.PropertyName == nameof(CardDetails.CardName))?.ErrorMessage)
            </span>
        </div>
        <div class="security w-100 justify-content-between">
            <div class="select-container w-75"
                 @onclick="@(() => { Style = new() { { "style", "opacity: 1; top: 210px; left: 378.475px; width: 104px; height: 76px;" } }; })">
                <label for="expiry" class="form-label font-monospace">Expiration Date</label>
                <select @onchange="HandleMonthChange" id="expiry" name="month" class="mr-20 form-select d-inline">
                    <option disabled selected value="" class="font-monospace">Month</option>
                    @foreach (var month in Months)
                    {
                        <option value="@month" class="font-monospace">@month</option>
                    }
                </select>

                <select @onchange="HandleYearChange" name="year" class="form-select d-inline">
                    <option disabled selected value="" class="font-monospace">Year</option>
                    @foreach (var year in Years)
                    {
                        <option value="@year" class="font-monospace">@year</option>
                    }
                </select>

            </div>
            <div class="input-container">
                <label for="cvv" class="form-label font-monospace">CVV</label>
                <input id="cvv" maxlength="4" type="number" class="cvv form-control" @bind="@CardDetails.Cvv" @bind:event="oninput" @onfocusin="Rotate" @onfocusout="RotateBack" name="cvv"/>
                <span class="validation-message">
                    @(validationErrors?.Errors.FirstOrDefault(e => e.PropertyName == nameof(CardDetails.Cvv))?.ErrorMessage)
                </span>
            </div>
        </div>
        <div class="input-container">
            <button class="btn btn-primary button">Submit</button>
        </div>
    </div>
</form>

@code {
    CardDetails? CardDetails { get; set; }

    Dictionary<string, object> CardNumberAttributes { get; } = new()
    {
        { "id", "cardNumber" },
        { "type", "text" },
        { "maxlength", "19" },
        { "class", "form-control mb-3" }
    };

    Dictionary<string, object> CardNameAttributes { get; } = new()
    {
        { "id", "cardName" },
        { "type", "text" },
        { "class", "form-control mb-3" },
    };

    string[] Years { get; set; }

    string[] Months { get; set; }

    bool isRotated { get; set; }

    ValidationResult validationErrors;

    string MonthExpiry { get; set; } = string.Empty;
    string YearExpiry { get; set; } = string.Empty;
    string MonthValueExpiry { get; set; } = string.Empty;
    string YearValueExpiry { get; set; } = string.Empty;
    Dictionary<string, object> Style { get; set; } = new();

    void Rotate()
    {
        isRotated = true;
    }

    void RotateBack()
    {
        isRotated = false;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CardDetails = new CardDetails();

        Months = Enumerable.Range(1, 12)
            .Select(month => month.ToString("D2"))
            .ToArray();

        Years = Enumerable.Range(2019, 12)
            .Select(year => year.ToString())
            .ToArray();
    }

    #region SweetAlertMessageModals

    // display message modal
    async void ShowMessage(CardResponse response)
    {
        try
        {
            var messageParams = new
            {
                title = response.Message,
                text = $"Name on Card: {response.CardName}, Card Number: {response.CardNumber}, Card Expiry {response.Month}/{response.Year}, CVV: {response.Cvv}",
                icon = "success",
                buttons = new
                {
                    confirm = new { text = "Okay", value = true }
                },
                dangerMode = false
            };

            await JavaScript.InvokeAsync<bool>("swal", messageParams);
        }
        catch
            (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    // display error message
    async Task ShowErrorMessage(Exception ex)
    {
        try
        {
            var messageParams = new
            {
                title = "Error",
                text = $"There has been an error, {ex.Message}, please try again later",
                icon = "error",
                buttons = new
                {
                    confirm = new { text = "Okay", value = true }
                },
                dangerMode = true
            };

            await JavaScript.InvokeAsync<bool>("swal", messageParams);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    #endregion

    #region FormSubmission

    // makes a post request when form is submitted
    async void SubmitForm()
    {
    // perform model validations using fluent validator
        try
        {
            validationErrors = await CardDetailsValidator.ValidateAsync(CardDetails);

            if (validationErrors.IsValid)
            {
                var response = await HttpClient.PostAsJsonAsync($"https://localhost:7063/validate-card-number", CardDetails);
                var message = await response.Content.ReadAsStringAsync();
                var cardResponse = JsonConvert.DeserializeObject<CardResponse>(message);
                ShowMessage(cardResponse);
            }
            else
            {
                foreach (var error in validationErrors.Errors)
                {
                    Console.WriteLine(error.ErrorMessage);
                }
            }
        }
        catch (Exception e)
        {
            ShowErrorMessage(e);
            Console.WriteLine(e);
        }
    }

    #endregion

    #region EventHandlerMethods

    void HandleNameInput(ChangeEventArgs args) => CardDetails.CardName = args.Value as string;

    void HandleNumberInput(ChangeEventArgs args)
    {
        string input = args.Value as string;
    // Remove any non-digit characters from the input
        string cleanInput = new string(input.Where(char.IsDigit).ToArray());
    // Initialize a formatted string
        StringBuilder formattedInput = new StringBuilder();
    // Iterate through the clean input and add gaps
        for (int i = 0; i < cleanInput.Length; i++)
        {
    // Add a gap every four characters, but not at the beginning
            if (i > 0 && i % 4 == 0)
            {
                formattedInput.Append(' '); // Add a gap
            }
            formattedInput.Append(cleanInput[i]);
        }
    // Update the CardNumber property with the formatted input
        CardDetails.CardNumber = formattedInput.ToString();
    }

    void HandleMonthChange(ChangeEventArgs args)
    {
        CardDetails.Month = args.Value as string;
        MonthExpiry = "swipe-up";
        MonthValueExpiry = "swipe-value-up";
    }

    void HandleYearChange(ChangeEventArgs args)
    {
        CardDetails.Year = args.Value as string;
        YearExpiry = "swipe-up";
        YearValueExpiry = "swipe-value-up";
    }

    private static void HandleKeyUp(KeyboardEventArgs args)
    {
        Console.WriteLine($"Key: {args.Key} pressed!");
    }

    #endregion

}